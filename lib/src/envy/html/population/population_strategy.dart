/// The population strategy determines how an Envy node populates the
/// DOM nodes of parent Envy node.
///
/// The default value is INDEPENDENT, which will populate _each_
/// DOM node of the Envy `HtmlNode` parent with all of the DOM nodes
/// generated by this Envy `HtmlNode`.
// ignore: one_member_abstracts
abstract class PopulationStrategy {
  /// Determine the coupling given the number of parent DOM nodes and
  /// nominal child DOM nodes.
  ///
  /// Note that the actual number of child DOM nodes may be affected by
  /// the implementation algorithm.
  List<DomNodeCoupling> determineCoupling(int parentCount, int childCount);
}

/// Represents a coupling between an index into the List if DOM nodes
/// generated by the parent `EnvyNode` and an index into each of the
/// dynamic properties for this EnvyNode.
///
class DomNodeCoupling {
  final int parentIndex;
  final int propIndex;

  DomNodeCoupling({this.parentIndex = -1, this.propIndex = -1});

  /// Two couplings with teh same parent and prop indeices are considered equals
  @override
  bool operator ==(dynamic other) {
    if (other is DomNodeCoupling) return hashCode == other.hashCode;
    return false;
  }

  @override
  int get hashCode => parentIndex * 10000000 + propIndex;
}
